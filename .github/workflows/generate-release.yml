name: Generate Release

on:
  push:
    branches:
      - main
    # paths:
    #   - "idiotCardGame/**"

jobs:
  check-commit-message:
    runs-on: ubuntu-latest
    outputs:
      new_release: ${{ steps.check.outputs.NEW_RELEASE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check commit message for release keyword
        id: check
        run: |
          commit_message=$(git log -1 --pretty=%B)
          echo "Commit message: $commit_message"
          if [[ "$commit_message" == *"[release]"* ]]; then
            echo "NEW_RELEASE=true" >> $GITHUB_ENV
            echo "NEW_RELEASE=true"
          else
            echo "NEW_RELEASE=false" >> $GITHUB_ENV
            echo "NEW_RELEASE=false"
          fi
        shell: bash

  build:
    runs-on: ${{ matrix.os }}
    needs: check-commit-message
    if: needs.check-commit-message.outputs.new_release == 'True'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "17"

      - name: Set up Maven
        uses: actions/setup-java@v2
        with:
          distribution: "adopt"
          java-version: "17"
          cache: "maven"

      - name: Change directory to project folder
        run: cd idiotCardGame

      - name: Build with Maven
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            mvn clean install -P linux
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            mvn clean install -P windows
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            mvn clean install -P mac
          fi

      - name: Make runtime with jlink
        run: mvn javafx:jlink

      - name: Package with jpackage
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            mvn jpackage:build -P linux
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            mvn jpackage:build -P windows
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            mvn jpackage:build -P mac
          fi

      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifact
          path: target/dist

  create-release:
    runs-on: ubuntu-latest
    needs: [check-commit-message, build]
    if: needs.check-commit-message.outputs.new_release == 'True'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux Artifact
        uses: actions/download-artifact@v4
        with:
          name: ubuntu-latest-artifact
          path: target/dist

      - name: Download Windows Artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-latest-artifact
          path: target/dist

      - name: Download macOS Artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-latest-artifact
          path: target/dist

      - name: Create Release Draft
        id: create_release
        uses: comnoco/create-release-action@v2
        with:
          tag_name: "v1.0.0"
          release_name: "v1.0.0"
          body: "**Release v1.0.0**"
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/dist/idiotfx-linux.zip
          asset_name: idiotfx-linux.zip
          asset_content_type: application/zip

      - name: Upload Windows Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/dist/idiotfx-windows.zip
          asset_name: idiotfx-windows.zip
          asset_content_type: application/zip

      - name: Upload macOS Artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: target/dist/idiotfx-macos.zip
          asset_name: idiotfx-macos.zip
          asset_content_type: application/zip
